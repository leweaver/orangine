#pragma once
// GENERATED BY codegen-enum.py
// Do not modify manually!

#include <string>

namespace oe {

// Material_type_index
enum class Material_type_index {
  Pbr = 0,
  Unlit,
  Deferred_light,
  Skybox,
  Clear_g_buffer,

  Num_material_type_index = 5,
};
const std::string& materialTypeIndexToString(Material_type_index enumValue);
Material_type_index stringToMaterialTypeIndex(const std::string& str);

// Material_alpha_mode
enum class Material_alpha_mode {
  Opaque = 0,
  Mask,
  Blend,

  Num_material_alpha_mode = 3,
};
const std::string& materialAlphaModeToString(Material_alpha_mode enumValue);
Material_alpha_mode stringToMaterialAlphaMode(const std::string& str);

// Material_face_cull_mode
enum class Material_face_cull_mode {
  Back_face = 0,
  Front_face,
  None,

  Num_material_face_cull_mode = 3,
};
const std::string& materialFaceCullModeToString(Material_face_cull_mode enumValue);
Material_face_cull_mode stringToMaterialFaceCullMode(const std::string& str);

// Material_light_mode
enum class Material_light_mode {
  Unlit = 0,
  Lit,

  Num_material_light_mode = 2,
};
const std::string& materialLightModeToString(Material_light_mode enumValue);
Material_light_mode stringToMaterialLightMode(const std::string& str);

// Render_pass_blend_mode
enum class Render_pass_blend_mode {
  Opaque = 0,
  Blended_alpha,
  Additive,

  Num_render_pass_blend_mode = 3,
};
const std::string& renderPassBlendModeToString(Render_pass_blend_mode enumValue);
Render_pass_blend_mode stringToRenderPassBlendMode(const std::string& str);

// Render_pass_depth_mode
enum class Render_pass_depth_mode {
  Read_write = 0,
  Read_only,
  Write_only,
  Disabled,

  Num_render_pass_depth_mode = 4,
};
const std::string& renderPassDepthModeToString(Render_pass_depth_mode enumValue);
Render_pass_depth_mode stringToRenderPassDepthMode(const std::string& str);

// Render_pass_stencil_mode
enum class Render_pass_stencil_mode {
  Enabled = 0,
  Disabled,

  Num_render_pass_stencil_mode = 2,
};
const std::string& renderPassStencilModeToString(Render_pass_stencil_mode enumValue);
Render_pass_stencil_mode stringToRenderPassStencilMode(const std::string& str);

// Render_pass_destination
enum class Render_pass_destination {
  Default = 0,
  Gbuffer,
  Render_target_view,

  Num_render_pass_destination = 3,
};
const std::string& renderPassDestinationToString(Render_pass_destination enumValue);
Render_pass_destination stringToRenderPassDestination(const std::string& str);

// Vertex_attribute
enum class Vertex_attribute {
  Position = 0,
  Color,
  Normal,
  Tangent,
  Bi_tangent,
  Tex_coord,
  Joints,
  Weights,

  Num_vertex_attribute = 8,
};
const std::string& vertexAttributeToString(Vertex_attribute enumValue);
Vertex_attribute stringToVertexAttribute(const std::string& str);

// Mesh_index_type
enum class Mesh_index_type {
  Triangles = 0,
  Lines,

  Num_mesh_index_type = 2,
};
const std::string& meshIndexTypeToString(Mesh_index_type enumValue);
Mesh_index_type stringToMeshIndexType(const std::string& str);

// Animation_type
enum class Animation_type {
  Translation = 0,
  Rotation,
  Scale,
  Morph,

  Num_animation_type = 4,
};
const std::string& animationTypeToString(Animation_type enumValue);
Animation_type stringToAnimationType(const std::string& str);

// Animation_interpolation
enum class Animation_interpolation {
  Linear = 0,
  Step,
  Cubic_spline,

  Num_animation_interpolation = 3,
};
const std::string& animationInterpolationToString(Animation_interpolation enumValue);
Animation_interpolation stringToAnimationInterpolation(const std::string& str);

// Element_type
enum class Element_type {
  Scalar = 0,
  Vector2,
  Vector3,
  Vector4,
  Matrix2,
  Matrix3,
  Matrix4,

  Num_element_type = 7,
};
const std::string& elementTypeToString(Element_type enumValue);
Element_type stringToElementType(const std::string& str);

// Element_component
enum class Element_component {
  Signed_byte = 0,
  Unsigned_byte,
  Signed_short,
  Unsigned_short,
  Signed_int,
  Unsigned_int,
  Float,

  Num_element_component = 7,
};
const std::string& elementComponentToString(Element_component enumValue);
Element_component stringToElementComponent(const std::string& str);

// Debug_display_mode
enum class Debug_display_mode {
  None = 0,
  Normals,
  World_positions,
  Lighting,

  Num_debug_display_mode = 4,
};
const std::string& debugDisplayModeToString(Debug_display_mode enumValue);
Debug_display_mode stringToDebugDisplayMode(const std::string& str);

// Sampler_filter_type
enum class Sampler_filter_type {
  Point = 0,
  Linear,
  Point_mipmap_point,
  Point_mipmap_linear,
  Linear_mipmap_point,
  Linear_mipmap_linear,

  Num_sampler_filter_type = 6,
};
const std::string& samplerFilterTypeToString(Sampler_filter_type enumValue);
Sampler_filter_type stringToSamplerFilterType(const std::string& str);

// Sampler_texture_address_mode
enum class Sampler_texture_address_mode {
  Wrap = 0,
  Mirror,
  Clamp,
  Border,
  Mirror_once,

  Num_sampler_texture_address_mode = 5,
};
const std::string& samplerTextureAddressModeToString(Sampler_texture_address_mode enumValue);
Sampler_texture_address_mode stringToSamplerTextureAddressMode(const std::string& str);

// Sampler_comparison_func
enum class Sampler_comparison_func {
  Never = 0,
  Less,
  Equal,
  Less_equal,
  Greater,
  Not_equal,
  Greater_equal,
  Always,

  Num_sampler_comparison_func = 8,
};
const std::string& samplerComparisonFuncToString(Sampler_comparison_func enumValue);
Sampler_comparison_func stringToSamplerComparisonFunc(const std::string& str);

// Shader_constant_buffer_usage
enum class Shader_constant_buffer_usage {
  Per_material = 0,
  Per_draw,
  Skeleton,

  Num_shader_constant_buffer_usage = 3,
};
const std::string& shaderConstantBufferUsageToString(Shader_constant_buffer_usage enumValue);
Shader_constant_buffer_usage stringToShaderConstantBufferUsage(const std::string& str);

// Shader_constant_buffer_visibility
enum class Shader_constant_buffer_visibility {
  All = 0,
  Vertex,
  Pixel,

  Num_shader_constant_buffer_visibility = 3,
};
const std::string& shaderConstantBufferVisibilityToString(Shader_constant_buffer_visibility enumValue);
Shader_constant_buffer_visibility stringToShaderConstantBufferVisibility(const std::string& str);

} // namespace oe