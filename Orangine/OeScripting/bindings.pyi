from typing import Any, ClassVar

from typing import overload

class Entity:
    position: Vector3
    rotation: Quat
    scale: Vector3
    def __init__(self, *args, **kwargs) -> None: ...
    def get_name(self) -> str: ...

class Input:
    class MouseButtonState:
        __doc__: ClassVar[str] = ...  # read-only
        __members__: ClassVar[dict] = ...  # read-only
        Held: ClassVar[Input.MouseButtonState] = ...
        Pressed: ClassVar[Input.MouseButtonState] = ...
        Released: ClassVar[Input.MouseButtonState] = ...
        Up: ClassVar[Input.MouseButtonState] = ...
        __entries: ClassVar[dict] = ...
        def __init__(self, value: int) -> None: ...
        def __eq__(self, other: object) -> bool: ...
        def __getstate__(self) -> int: ...
        def __hash__(self) -> int: ...
        def __int__(self) -> int: ...
        def __ne__(self, other: object) -> bool: ...
        def __setstate__(self, state: int) -> None: ...
        @property
        def name(self) -> str: ...
        @property
        def value(self) -> int: ...

    class MouseState:
        delta_position: Vector2i
        left: Input.MouseButtonState
        middle: Input.MouseButtonState
        right: Input.MouseButtonState
        scroll_wheel_delta: int
        def __init__(self) -> None: ...
    Held: ClassVar[Input.MouseButtonState] = ...
    Pressed: ClassVar[Input.MouseButtonState] = ...
    Released: ClassVar[Input.MouseButtonState] = ...
    Up: ClassVar[Input.MouseButtonState] = ...
    def __init__(self, *args, **kwargs) -> None: ...
    def get_mouse_state(self, *args, **kwargs) -> Any: ...

class NativeContext:
    def __init__(self, *args, **kwargs) -> None: ...
    @property
    def input(self) -> Any: ...

class Quat:
    w: float
    x: float
    y: float
    z: float
    @overload
    def __init__(self) -> None: ...
    @overload
    def __init__(self, arg0: float, arg1: float, arg2: float, arg3: float) -> None: ...
    def rotation_x(self, *args, **kwargs) -> Any: ...
    def rotation_y(self, *args, **kwargs) -> Any: ...
    def rotation_z(self, *args, **kwargs) -> Any: ...
    def __mul__(self, arg0: Quat) -> Quat: ...

class SceneGraph:
    def __init__(self, *args, **kwargs) -> None: ...
    def instantiate(self, name: str = ..., parent: Entity = ...) -> Entity: ...

class Vector2i:
    x: int
    y: int
    def __init__(self) -> None: ...

class Vector2u:
    x: int
    y: int
    def __init__(self) -> None: ...

class Vector3:
    x: float
    y: float
    z: float
    @overload
    def __init__(self) -> None: ...
    @overload
    def __init__(self, arg0: float, arg1: float, arg2: float) -> None: ...

def log_debug(arg0: str) -> None: ...
def log_debug_enabled() -> bool: ...
def log_info(arg0: str) -> None: ...
def log_info_enabled() -> bool: ...
def log_warning(arg0: str) -> None: ...
def log_warning_enabled() -> bool: ...
